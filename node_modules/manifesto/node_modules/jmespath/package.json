{
  "name": "jmespath",
  "description": "JMESPath implementation in javascript",
  "version": "0.12.0",
  "author": {
    "name": "James Saryerwinnie",
    "email": "js@jamesls.com",
    "url": "http://jamesls.com/"
  },
  "homepage": "https://github.com/jmespath/jmespath.js",
  "contributors": [],
  "devDependencies": {
    "del": "^1.2.0",
    "grunt": "^0.4.4",
    "grunt-contrib-jshint": "^0.11.0",
    "grunt-contrib-uglify": "^0.7.0",
    "grunt-eslint": "^6.0.0",
    "gulp-browserify": "^0.5.1",
    "gulp-eslint": "^0.15.0",
    "gulp-jshint": "^1.11.2",
    "gulp-mocha": "^2.1.3",
    "gulp-rename": "^1.2.2",
    "gulp-uglify": "^1.2.0",
    "lodash": "^3.10.0",
    "mocha": "^2.1.0",
    "path": "^0.11.14",
    "run-sequence": "^1.1.1",
    "yargs": "^3.15.0"
  },
  "dependencies": {
    "gulp": "^3.9.0",
    "lodash._basetostring": "^3.0.1",
    "lodash.indexof": "^3.0.3",
    "lodash.isarray": "^3.0.4",
    "lodash.isobject": "^3.0.2",
    "lodash.keys": "^3.1.2",
    "lodash.lastindexof": "^3.0.2"
  },
  "main": "jmespath.js",
  "directories": {
    "test": "test"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jmespath/jmespath.js.git"
  },
  "bugs": {
    "url": "http://github.com/jmespath/jmespath.js/issues"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://github.com/jmespath/jmespath.js/raw/master/LICENSE"
    }
  ],
  "keywords": [
    "jmespath",
    "jsonpath",
    "json",
    "xpath"
  ],
  "scripts": {
    "test": "mocha test/"
  },
  "readme": "# jmespath.js\n\n[![Build Status](https://travis-ci.org/jmespath/jmespath.js.png?branch=master)](https://travis-ci.org/jmespath/jmespath.js)\n\njmespath.js is a javascript implementation of JMESPath,\nwhich is a query language for JSON.  It will take a JSON\ndocument and transform it into another JSON document\nthrough a JMESPath expression.\n\nUsing jmespath.js is really easy.  There's a single function\nyou use, `jmespath.search`:\n\n\n```\n> var jmespath = require('jmespath');\n> jmespath.search({foo: {bar: {baz: [0, 1, 2, 3, 4]}}}, \"foo.bar.baz[2]\")\n2\n```\n\nIn the example we gave the ``search`` function input data of\n`{foo: {bar: {baz: [0, 1, 2, 3, 4]}}}` as well as the JMESPath\nexpression `foo.bar.baz[2]`, and the `search` function evaluated\nthe expression against the input data to produce the result ``2``.\n\nThe JMESPath language can do a lot more than select an element\nfrom a list.  Here are a few more examples:\n\n```\n> jmespath.search({foo: {bar: {baz: [0, 1, 2, 3, 4]}}}, \"foo.bar\")\n{ baz: [ 0, 1, 2, 3, 4 ] }\n\n> jmespath.search({\"foo\": [{\"first\": \"a\", \"last\": \"b\"},\n                           {\"first\": \"c\", \"last\": \"d\"}]},\n                  \"foo[*].first\")\n[ 'a', 'c' ]\n\n> jmespath.search({\"foo\": [{\"age\": 20}, {\"age\": 25},\n                           {\"age\": 30}, {\"age\": 35},\n                           {\"age\": 40}]},\n                  \"foo[?age > `30`]\")\n[ { age: 35 }, { age: 40 } ]\n```\n\n## More Resources\n\nThe example above only show a small amount of what\na JMESPath expression can do.  If you want to take a\ntour of the language, the *best* place to go is the\n[JMESPath Tutorial](http://jmespath.org/tutorial.html).\n\nOne of the best things about JMESPath is that it is\nimplemented in many different programming languages including\npython, ruby, php, lua, etc.  To see a complete list of libraries,\ncheck out the [JMESPath libraries page](http://jmespath.org/libraries.html).\n\nAnd finally, the full JMESPath specification can be found\non the [JMESPath site](http://jmespath.org/specification.html).\n",
  "readmeFilename": "README.md",
  "gitHead": "3f84090db218a8f04ab3ca728cc91ea757360ebc",
  "_id": "jmespath@0.12.0",
  "_shasum": "e1dc32bcc13b9fc96c9b92bc7d969e5507f3ffc7",
  "_from": "git://github.com/edsilv/jmespath.js.git",
  "_resolved": "git://github.com/edsilv/jmespath.js.git#3f84090db218a8f04ab3ca728cc91ea757360ebc"
}
